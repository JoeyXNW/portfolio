{"ast":null,"code":"export const validate = (element, formData = []) => {\n  let error = [true, \"\"];\n  if (!element.validation.required) return error;\n  let valid = element.value.trim() !== \"\";\n  let message = `${!valid ? \"This field is required\" : \"\"}`;\n\n  if (valid && element.validation.email) {\n    valid = /\\S+@\\S+\\.\\S+/.test(element.value);\n    message = `${!valid ? \"Must be a valid email\" : \"\"}`;\n  }\n\n  error = [valid, message];\n  return error;\n};\nexport const update = (element, formData) => {\n  const newFormData = { ...formData\n  };\n  const newElement = { ...newFormData[element.id]\n  };\n  newElement.value = element.event.target.value;\n\n  if (element.blur) {\n    let validData = validate(newElement, formData);\n    newElement.valid = validData[0];\n    newElement.validationMessage = validData[1];\n  } // newElement.touched = element.blur;\n\n\n  newFormData[element.id] = newElement;\n  return newFormData;\n};","map":{"version":3,"sources":["/Users/Ning/Desktop/portfolio/src/components/utils/misc.js"],"names":["validate","element","formData","error","validation","required","valid","value","trim","message","email","test","update","newFormData","newElement","id","event","target","blur","validData","validationMessage"],"mappings":"AAAA,OAAO,MAAMA,QAAQ,GAAG,CAACC,OAAD,EAAUC,QAAQ,GAAG,EAArB,KAA4B;AAClD,MAAIC,KAAK,GAAG,CAAC,IAAD,EAAO,EAAP,CAAZ;AACA,MAAI,CAACF,OAAO,CAACG,UAAR,CAAmBC,QAAxB,EAAkC,OAAOF,KAAP;AAElC,MAAIG,KAAK,GAAGL,OAAO,CAACM,KAAR,CAAcC,IAAd,OAAyB,EAArC;AACA,MAAIC,OAAO,GAAI,GAAE,CAACH,KAAD,GAAS,wBAAT,GAAoC,EAAG,EAAxD;;AAEA,MAAIA,KAAK,IAAIL,OAAO,CAACG,UAAR,CAAmBM,KAAhC,EAAuC;AACrCJ,IAAAA,KAAK,GAAG,eAAeK,IAAf,CAAoBV,OAAO,CAACM,KAA5B,CAAR;AACAE,IAAAA,OAAO,GAAI,GAAE,CAACH,KAAD,GAAS,uBAAT,GAAmC,EAAG,EAAnD;AACD;;AAEDH,EAAAA,KAAK,GAAG,CAACG,KAAD,EAAQG,OAAR,CAAR;AACA,SAAON,KAAP;AACD,CAdM;AAgBP,OAAO,MAAMS,MAAM,GAAG,CAACX,OAAD,EAAUC,QAAV,KAAuB;AAC3C,QAAMW,WAAW,GAAG,EAAE,GAAGX;AAAL,GAApB;AACA,QAAMY,UAAU,GAAG,EAAE,GAAGD,WAAW,CAACZ,OAAO,CAACc,EAAT;AAAhB,GAAnB;AACAD,EAAAA,UAAU,CAACP,KAAX,GAAmBN,OAAO,CAACe,KAAR,CAAcC,MAAd,CAAqBV,KAAxC;;AAEA,MAAIN,OAAO,CAACiB,IAAZ,EAAkB;AAChB,QAAIC,SAAS,GAAGnB,QAAQ,CAACc,UAAD,EAAaZ,QAAb,CAAxB;AACAY,IAAAA,UAAU,CAACR,KAAX,GAAmBa,SAAS,CAAC,CAAD,CAA5B;AACAL,IAAAA,UAAU,CAACM,iBAAX,GAA+BD,SAAS,CAAC,CAAD,CAAxC;AACD,GAT0C,CAW3C;;;AACAN,EAAAA,WAAW,CAACZ,OAAO,CAACc,EAAT,CAAX,GAA0BD,UAA1B;AACA,SAAOD,WAAP;AACD,CAdM","sourcesContent":["export const validate = (element, formData = []) => {\n  let error = [true, \"\"];\n  if (!element.validation.required) return error;\n\n  let valid = element.value.trim() !== \"\";\n  let message = `${!valid ? \"This field is required\" : \"\"}`;\n\n  if (valid && element.validation.email) {\n    valid = /\\S+@\\S+\\.\\S+/.test(element.value);\n    message = `${!valid ? \"Must be a valid email\" : \"\"}`;\n  }\n\n  error = [valid, message];\n  return error;\n};\n\nexport const update = (element, formData) => {\n  const newFormData = { ...formData };\n  const newElement = { ...newFormData[element.id] };\n  newElement.value = element.event.target.value;\n\n  if (element.blur) {\n    let validData = validate(newElement, formData);\n    newElement.valid = validData[0];\n    newElement.validationMessage = validData[1];\n  }\n\n  // newElement.touched = element.blur;\n  newFormData[element.id] = newElement;\n  return newFormData;\n};\n"]},"metadata":{},"sourceType":"module"}